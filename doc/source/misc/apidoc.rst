APIドキュメントの読み方
----------------------------------

ScalaのAPIドキュメントは、型パラメータを多用していたり、記号が関数名になっていたりと、馴れていないとなかなか読みにくいものです。

ただ、ちょっとしたこつをつかむとすんなり読めるようになるので、ここではそのこつをちょっと書いてみます。

では、例としてListクラスのScalaDocを見てます。ScalaはListに始まりListで終わると言っても過言ではありません(?)。

`ListクラスのScalaDoc <http://www.scala-lang.org/docu/files/api/scala/List.html>`

型パラメータを意識する
__________________________

Listクラスの定義は以下のようになっています。

  sealed abstract class List[+A]

ここで意識するのは[+A]で指定されている型パラメータです。Aには、List[String]の場合はStringが該当します。"+"が付いているので、Aは共変です。List[Date]の場合、Aには、例えばjava.sql.Dateも該当しますし、List[Date]型の変数にはList[java.sql.Date]型を代入できます。

さて、この型パラメータAですが、関数の定義でよく出てきます。Aは、Listが持つ要素の型である、という意識を強く持ってAPIを見るのがコツその1です。

引数と結果型を読み解く
______________________________________

では、関数の定義を見てみましょう。例として、map関数の定義を取り上げます。

  map [B](f : (A) => B) : List[B]

さて、まず注目するのは、Bという"型"です。先ほどのA型もそうですが、Scalaの場合型パラメータは大文字アルファベット1文字で表現して、たいていAから順に宣言されます。

A型はすでにクラスの型パラメータに使用されているので、ここで登場するB型はmap関数のみで使用する型パラメータだとわかります。

この時点では、B型はなんかわからんがString以外の型を取るかもしれないんだな、くらいの認識でよいです。

さて、次に引数に注目します。"f : (A ) => B )"となっています。引数を見るときにマズ確認するのは、"=>"が引数の定義の中にあるかどうかです。

"=>"があるということは、引数は関数型だということです。あとは、"=>"の前後の型をみて、その関数型が、なにを引数にとってなにを結果として返すのかを判断するだけです。

この場合は、引数fはA型をパラメータとしてもらってB型を返すということがわかります。ここで、B型は、この引数fに渡した関数の結果型になる、つまり、呼び出し側で好きな型を指定できるということがわかります。

ここまでくればあとは簡単、結果型を見て、List[B]となっているので、引数fに渡した結果を集めてList[B]にしてくれるが、map関数である、と理解できるはずです。

ちなみに、関数を受け取る引数名は、たいてい"f"です。「fは、関数」という覚え型でもよいかもしれません。

タプルはあるか?
______________________________________
引数の型に(A, A)などのように、(,)が登場したらそれはタプルです。

最後の引数に注目する
______________________________________

引数の最後がf: (A) => B のように関数になっている場合は、このように{}を使って呼び出すものだと覚えると、ソースを読むのが楽になるでしょう。

例として、foldLeft関数を取り上げます。(foldLeftは/:を使うこともありますしこちらのほうが馴れると読みやすいですが･･･)

  def foldLeft [B](z : B)(f : (B,  A) => B) : B

これはカリー化された状態で宣言されている関数です。第２引数は、タプル(B, A)型を取ってB型を返す関数になります。

例として、List[String]内の文字数の合計を集計する処理を書いてみます。第２引数の関数は、{}で渡すのが慣例です。

.. code-block:: scala

  scala> l.foldLeft(0){ (i, e) => i + e.length }
  res33: Int = 16


要は、慣れ
__________________________

長々と説明しましたが、馴れるとこのプロセスは意識しなくても瞬間的に読み取れるようになります。
まずはAPIドキュメントをたくさん読みましょう。



