============================
Scalaの開発スタイル
============================

ソースコードとコンパイル
---------------------------------------

コンパイル
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Scalaは、静的言語です。Scalaで書かれたアプリケーションは、ソースコードをコンパイルして実行する必要があります。

ソースコードをコンパイルするには、``scalac``コマンドを使います。ソースコードがあるディレクトリで、以下のようにコマンドを実行することでコンパイルが行われます。

.. code-block:: console

  $ scalac HelloWorld.scala


scalacコマンドを実行して、コンパイルエラーが発生しないで正常に終了した場合は、拡張子``.class``のファイルがいくつか生成されているはずです。このclassファイルが、Scalaのソースコードをコンパイルした結果得られる、実行可能なファイルなのです。

NetBeansなどのIDEを利用する場合は、ソースコードのコンパイルはファイルを保存すると自動的に実行されますので、IDE利用時には明示的にscalacコマンドでコンパイルさせる必要はないでしょう。

  コンパイルする際には、Javaと同様に依存関係にあるjarファイルなどをクラスパスに指定してコンパイルする必要があります。コマンドからクラスパスを設定してコンパイルするのははっきりいて無謀なので、IDEやMavenなどを利用するのが普通です。

ソースコードの書き方
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ソースコードは、任意のファイル名で、拡張子は``.scala``としておきます。

Javaでは、一つのソースファイルに定義できるpublicなクラスは一つだけで、かつクラス名とソースファイル名が一致している必要がありましたが、Scalaのソースコードにはそのような制約はありません。

ひとつのソースファイルに複数のpublicクラスを定義してもよいし、クラス名とソースファイル名が一致していなくとも問題ないのです。

ただし、特に理由がない場合は、Javaと同様に、ソースファイルに定義されているクラス名と同じファイル名にすることが推奨されています。


アプリケーションを作り、実行する
---------------------------------------

アプリケーションのエントリポイント(main関数)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Scalaのプログラムを実行するには、main関数を持つオブジェクトを``scala``コマンドで指定する必要があります。ここは、Javaアプリケーションと変わることはありません。

では、Scalaでのmain関数はどのように記述するのでしょうか?以下のプログラムを見てください。

.. code-block:: scala

  object Main {
    // main関数
    def main(args: Array[String]) :Unit = {
      println("Hello, world!")
      args foreach println
    }
  }

このファイルを、HelloWorld.scalaというファイル名で保存してください。これが、"main関数を持つオブジェクト"です。

Scalaのアプリケーションとして実行時に指定するオブジェクト(任意の名前で構いません)の中に、mainという関数名で引数にArray[String]をとってUnit型を返す関数を定義します。

クラスの宣言や関数の定義の方法については、後ほど説明しますので、今の時点では実行時に指定するソースファイルにはこのように記述するものだと覚えておいてください。


コンパイルして、実行する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
先ほど作ったHelloWorld.scalaをコンパイルして、実行してみましょう。以下のようにコマンドを入力します。(IDEを利用する場合はIDEから実行)

.. code-block:: console

  $ scalac HelloWorld.scala
  $ scala HelloWorld foo bar baz


正常に実行できれば、"Hello, world!"の文字列と、アプリケーションに渡した実行時引数が出力されるはずです。


インタプリタでの実行
---------------------------------------
Scalaは、静的言語で実行にはコンパイルが必要ですが、LL言語にあるような対話型インタプリタ(REPL)が付属しています。

Scalaインタプリタでは、入力された式を評価して結果を表示してくれるので、インタプリタで動作を確認しながらプログラムを記述し、ある程度形になったらコンパイルして実行、というスタイルで開発できるのです。

では、さっそくインタプリタを起動してみましょう。Scalaインタプリタは、単純に``scala``コマンドで起動します。

.. code-block:: console

    $ scala
    Welcome to Scala version 2.7.7.final (Java HotSpot(TM ) 64-Bit Server VM,  Java 1.6.0_15 ).
    Type in expressions to have them evaluated.
    Type :help for more information.

    scala>

起動したら、以下のように入力してみましょう。

.. code-block:: console

  scala> 1 + 2
  res0: Int = 3

入力した"1 + 2"を実行して評価した結果が、Int型で3であることが出力されます。

この``res0``というのは、インタプリタが結果を格納している変数ですので、後からも利用できます。

.. code-block:: console

  scala> res0 + 3
  res1: Int = 6

インタプリタ内で、変数や関数を宣言して利用することも可能です。

.. code-block:: console

  scala> val foo = "Foo"
  foo: java.lang.String = Foo

  scala> foo + " Bar"
  res2: java.lang.String = Foo Bar

  scala> def pow( n:Int ) = n * n
  pow: (Int)Int

  scala> pow( 8 )
  res3: Int = 64


